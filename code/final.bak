program final;
uses crt;
function prime(n:integer):boolean;
var i:integer;
begin
 if n <= 1 then
  prime:=false
 else
  prime:=true;
 for i:=1 to trunc(sqrt(n)) do
  begin
   if n mod i = 0 then
    begin
     prime:=false;
     exit;
    end;
  end;
end;
{=======================================}
function fbnc(n:integer):integer;
begin
 while n <= 1 do
  begin
   fbnc:=fbnc(n-1) + fbnc(n-2);
  end;
end;
{=======================================}
function gcd(a,b:integer):integer;
var temp:integer;
begin
 while b <> 0 do
  begin
   temp:=b;
   b:=a mod b;
   a:=temp;
  end;
end;
{=======================================}
function dura(n:integer):integer;
var dora:integer;
begin
dora:=0;
 while n >= 10 do
  begin
   n:=(n mod 10) * (n div 10);
   dora:=dora + 1;
  end;
 dura:=dora;
end;
{=======================================}
procedure tsnt(n:integer);
var i:integer;
begin
 while n mod 2 = 0 do
  begin
   write(2,' ');
   n:=n div 2;
  end;
 i:=3;
  while i <= trunc(sqrt(n)) do
   begin
    while n mod i = 0 do
     begin
      write(i,' ');
      n:=n mod i;
     end;
    i:=i+2;
   end;
  if n > 2 then
   write(n,' ');
end;
{=======================================}
function pfnb(n:integer):boolean;
var i,idk:integer;
begin
idk:=0;
 for i:=1 to n div 2 do
  if n mod 2 = 0 then
   idk:=idk+1;
   pfnb:=idk=n;
end;
{=======================================}
procedure bbs(var arr:array of integer;n:integer);
var i,j,temp:integer;
begin
 for i:=1 to n - 1 do
  for j:=1 to n - i do
   if arr[j] > arr[j+1] then
    begin
     temp:=arr[j];
     arr[j]:=arr[j+1];
     arr[j+1]:=temp;
    end;
end;

{=======================================}
function search(var arr:array of integer;n,k:integer):integer;
var i:integer;
begin
 for i:=1 to n do
  if arr[i] = k then
   begin
    search:=i;
    exit;
   end
  else
   search:=-1;
end;
{=======================================}
var a,b,n,i,kq,key,mode,pos:integer;
    arr:array[word] of integer;
    str:string;
begin
clrscr;
 writeln('|========|');
 writeln('|1:Normal|');
 writeln('|2:Array |');
 writeln('|3:String|');
 writeln('|========|');
 write('Choose mode:');
  readln(mode);
 if mode > 3 then
  exit;
 if mode < 0 then
  exit;
{=======================================}
if mode = 1 then
begin
clrscr;
 write('Input a:');
  readln(a);
 write('Input b:');
  readln(b);
 writeln('UCLN cua ',a,' va ',b,' la:',gcd(a,b));
 writeln('BCNN cua ',a,' va ',b,' la:',(a * b) div gcd(a,b));
 writeln('Do ben cua ',a,' la:',dura(a));
 writeln('Do ben cua ',b,' la:',dura(b));
 writeln('So fibonaci cua ',a,' la:',fbnc(a));
 writeln('So fibonaci cua ',b,' la:',fbnc(b));
end;
{=======================================}
if mode = 2 then
begin
clrscr;
 write('Input number of array:');
  readln(n);
 for i:=1 to n do
  begin
   write('Input arr[',i,']:=');
    readln(arr[i]);
  end;
 bbs(arr,n);
  writeln('Array after sorting:');
 for i:=1 to n do
  writeln('arr[',i,']:=',arr[i]);
 write('Input key:');
  readln(key);
 pos:=search(arr,n,key);
  if pos <> -1 then
   write('found ',key,' in arr[',pos,']')
  else
   write('not found ',key,'');
end;
{=======================================}
if mode = 3 then
begin
clrscr;
 write('Input string:');
  readln(str);
 for i:=1 to length(str) do
end;
{=======================================}
readln
end.